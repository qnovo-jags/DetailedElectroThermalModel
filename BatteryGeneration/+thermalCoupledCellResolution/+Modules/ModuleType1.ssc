component ModuleType1
    % ModuleType1:2
    % Module Block
    %    Model resolution: Detailed
    %    Number of parallel assemblies: 6
    %    Number of cells per parallel assembly: 2
    %
    %    MATLAB version: 25.1
    %    Simscape Battery version: 25.1
    %    Simscape code generated on: 08-Sep-2025 00:01:38

    parameters(ExternalAccess=none)
        AmbientResistanceConnectionIndex = getConnectionIndex(AmbientResistance,S); % AmbientResistanceConnectionIndex
        P = 2; % Batteries in Parallel
        S = 6; % Batteries in Series
        CellCount = P*S; % Number of cells in battery
        NumCellThermalNodeElements = ParallelAssembly1(1).NumCellThermalNodeElements; % NumCellThermalNodeElements
    end

    parameters
        BatteryCapacityCell = {27,'A*hr'}; % Battery capacity
        BatteryCapacityCellPercentDeviation = zeros([12 1]); % Percent deviation for BatteryCapacityCell
        ExtrapolationMethodCell = {simscape.enum.extrapolation.nearest,'1'}; % Extrapolation method for all tables
        SOCBreakpointsCell = {[0, .1, .25, .5, .75, .9, 1],'1'}; % State of charge breakpoints, SOC
        SOCBreakpointsCellPercentDeviation = zeros([12 1]); % Percent deviation for SOCBreakpointsCell
        TemperatureBreakpointsCell = {[278, 293, 313],'K'}; % Temperature breakpoints, T
        TemperatureBreakpointsCellPercentDeviation = zeros([12 1]); % Percent deviation for TemperatureBreakpointsCell
        OpenCircuitVoltageThermalCell = {[3.49, 3.5, 3.51; 3.55, 3.57, 3.56; 3.62, 3.63, 3.64; 3.71, 3.71, 3.72; 3.91, 3.93, 3.94; 4.07, 4.08, 4.08; 4.19, 4.19, 4.19],'V'}; % Open-circuit voltage, OCV(SOC,T)
        OpenCircuitVoltageThermalCellPercentDeviation = zeros([12 1]); % Percent deviation for OpenCircuitVoltageThermalCell
        VoltageRangeCell = {[0, inf],'V'}; % Terminal voltage operating range, [Min Max]
        VoltageRangeCellPercentDeviation = zeros([12 1]); % Percent deviation for VoltageRangeCell
        ResistanceSOCBreakpointsCell = {[0, .1, .25, .5, .75, .9, 1],'1'}; % State of charge breakpoints for resistance, SOC
        ResistanceSOCBreakpointsCellPercentDeviation = zeros([12 1]); % Percent deviation for ResistanceSOCBreakpointsCell
        ResistanceTemperatureBreakpointsCell = {[278, 293, 313],'K'}; % Temperature breakpoints for resistance, T
        ResistanceTemperatureBreakpointsCellPercentDeviation = zeros([12 1]); % Percent deviation for ResistanceTemperatureBreakpointsCell
        R0ThermalCell = {[.0117, .0085, .009; .011, .0085, .009; .0114, .0087, .0092; .0107, .0082, .0088; .0107, .0083, .0091; .0113, .0085, .0089; .0116, .0085, .0089],'Ohm'}; % Instantaneous resistance, R0(SOC,T)
        R0ThermalCellPercentDeviation = zeros([12 1]); % Percent deviation for R0ThermalCell
        R1ThermalCell = {[.0109, .0029, .0013; .0069, .0024, .0012; .0047, .0026, .0013; .0034, .0016, .001; .0033, .0023, .0014; .0033, .0018, .0011; .0028, .0017, .0011],'Ohm'}; % First polarization resistance, R1(SOC,T)
        R1ThermalCellPercentDeviation = zeros([12 1]); % Percent deviation for R1ThermalCell
        Tau1ThermalCell = {[20, 36, 39; 31, 45, 39; 109, 105, 61; 36, 29, 26; 59, 77, 67; 40, 33, 29; 25, 39, 33],'s'}; % First time constant, Tau1(SOC,T)
        Tau1ThermalCellPercentDeviation = zeros([12 1]); % Percent deviation for Tau1ThermalCell
        BatteryThermalMassCell = {100,'J/K'}; % Battery thermal mass
        BatteryThermalMassCellPercentDeviation = zeros([12 1]); % Percent deviation for BatteryThermalMassCell
        AmbientResistance = {25,'K/W'}; % Cell level ambient thermal path resistance
    end

    parameters(Access=private)
        AmbientResistanceScaled = AmbientResistance; % Scaled cell level ambient thermal path resistance
    end

    nodes
        p = foundation.electrical.electrical; % +
        n = foundation.electrical.electrical; % -
        AmbH = foundation.thermal.thermal; % AmbH
    end

    variables
        socCell = {value={repmat(1,12,1),'1'},priority=priority.high}; % Cell state of charge
        batteryVoltage = {repmat(0,12,1),'V'}; % Terminal voltage
        batteryCurrent = {repmat(0,12,1),'A'}; % Current (positive in)
        numCycles = {value={repmat(0,12,1),'1'},priority=priority.high}; % Discharge cycles
        batteryTemperature = {value={repmat(298.15,12,1),'K'},priority=priority.high}; % Temperature
        vParallelAssembly = {value={repmat(0,6,1),'V'},priority=priority.none}; % Parallel Assembly Voltage
        socParallelAssembly = {value={repmat(1,6,1),'1'},priority=priority.none}; % Parallel Assembly state of charge
    end

    equations
        assert(length(socCell) == CellCount);
        assert(length(batteryVoltage) == CellCount);
        assert(length(batteryCurrent) == CellCount);
        assert(length(numCycles) == CellCount);
        assert(length(batteryTemperature) == CellCount);
        assert(length(vParallelAssembly) == S);
        assert(length(socParallelAssembly) == S);
        assert(isequal(size(AmbientResistance),[1,1]) || isequal(size(AmbientResistance),[NumCellThermalNodeElements,P*S]),...
            'Cell level ambient thermal path resistance must be scalar or an M-by-N array, where M is the number of elements of the cell thermal node and N is number of cells modeled by the block.');
        assert(isValidPercentDeviationSize(BatteryCapacityCellPercentDeviation,BatteryCapacityCell,S*P),...
            'Percent deviation for BatteryCapacityCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
        assert(isValidPercentDeviationSize(SOCBreakpointsCellPercentDeviation,SOCBreakpointsCell,S*P),...
            'Percent deviation for SOCBreakpointsCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
        assert(isValidPercentDeviationSize(TemperatureBreakpointsCellPercentDeviation,TemperatureBreakpointsCell,S*P),...
            'Percent deviation for TemperatureBreakpointsCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
        assert(isValidPercentDeviationSize(OpenCircuitVoltageThermalCellPercentDeviation,OpenCircuitVoltageThermalCell,S*P),...
            'Percent deviation for OpenCircuitVoltageThermalCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
        assert(isValidPercentDeviationSize(VoltageRangeCellPercentDeviation,VoltageRangeCell,S*P),...
            'Percent deviation for VoltageRangeCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
        assert(isValidPercentDeviationSize(ResistanceSOCBreakpointsCellPercentDeviation,ResistanceSOCBreakpointsCell,S*P),...
            'Percent deviation for ResistanceSOCBreakpointsCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
        assert(isValidPercentDeviationSize(ResistanceTemperatureBreakpointsCellPercentDeviation,ResistanceTemperatureBreakpointsCell,S*P),...
            'Percent deviation for ResistanceTemperatureBreakpointsCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
        assert(isValidPercentDeviationSize(R0ThermalCellPercentDeviation,R0ThermalCell,S*P),...
            'Percent deviation for R0ThermalCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
        assert(isValidPercentDeviationSize(R1ThermalCellPercentDeviation,R1ThermalCell,S*P),...
            'Percent deviation for R1ThermalCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
        assert(isValidPercentDeviationSize(Tau1ThermalCellPercentDeviation,Tau1ThermalCell,S*P),...
            'Percent deviation for Tau1ThermalCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
        assert(isValidPercentDeviationSize(BatteryThermalMassCellPercentDeviation,BatteryThermalMassCell,S*P),...
            'Percent deviation for BatteryThermalMassCell must contain a number of vertically concatenated elements equal to the number of cell models. Each element must be a scalar or equal to the size of the underlying parameter.');
    end

    connections
        connect(p,ParallelAssembly1(1).p);
        connect(n,ParallelAssembly1(end).n);
        connect(ParallelAssembly1(:).AmbH,AmbH);
    end

    annotations
        [p] : Side=top;
        [n] : Side=bottom;
        UILayout = [UIGroup("Main",BatteryCapacityCell,BatteryCapacityCellPercentDeviation,ExtrapolationMethodCell),...
            UIGroup("Open Circuit Voltage",SOCBreakpointsCell,SOCBreakpointsCellPercentDeviation,TemperatureBreakpointsCell,TemperatureBreakpointsCellPercentDeviation,OpenCircuitVoltageThermalCell,OpenCircuitVoltageThermalCellPercentDeviation,VoltageRangeCell,VoltageRangeCellPercentDeviation),...
            UIGroup("Overpotential",ResistanceSOCBreakpointsCell,ResistanceSOCBreakpointsCellPercentDeviation,ResistanceTemperatureBreakpointsCell,ResistanceTemperatureBreakpointsCellPercentDeviation,R0ThermalCell,R0ThermalCellPercentDeviation,R1ThermalCell,R1ThermalCellPercentDeviation,Tau1ThermalCell,Tau1ThermalCellPercentDeviation),...
            UIGroup("Thermal",BatteryThermalMassCell,BatteryThermalMassCellPercentDeviation,AmbientResistance)];
        Icon = 'module.svg';
    end

    for Sidx = 1:S
        components(ExternalAccess=observe,CompileReuse=true)
            ParallelAssembly1(Sidx) = thermalCoupledCellResolution.ParallelAssemblies.ParallelAssemblyType1(...
                P = P,...
                BatteryCapacityCell = BatteryCapacityCell,ExtrapolationMethodCell = ExtrapolationMethodCell,...
                SOCBreakpointsCell = SOCBreakpointsCell,...
                TemperatureBreakpointsCell = TemperatureBreakpointsCell,OpenCircuitVoltageThermalCell = OpenCircuitVoltageThermalCell,...
                VoltageRangeCell = VoltageRangeCell,...
                ResistanceSOCBreakpointsCell = ResistanceSOCBreakpointsCell,...
                ResistanceTemperatureBreakpointsCell = ResistanceTemperatureBreakpointsCell,R0ThermalCell = R0ThermalCell,...
                R1ThermalCell = R1ThermalCell,Tau1ThermalCell = Tau1ThermalCell,...
                BatteryThermalMassCell = BatteryThermalMassCell,...
                AmbientResistance = AmbientResistanceScaled(:,AmbientResistanceConnectionIndex(1,Sidx):AmbientResistanceConnectionIndex(2,Sidx)),...
                BatteryCapacityCellPercentDeviation = indexParameterDeviation(BatteryCapacityCellPercentDeviation,S,Sidx),...
                SOCBreakpointsCellPercentDeviation = indexParameterDeviation(SOCBreakpointsCellPercentDeviation,S,Sidx),...
                TemperatureBreakpointsCellPercentDeviation = indexParameterDeviation(TemperatureBreakpointsCellPercentDeviation,S,Sidx),...
                OpenCircuitVoltageThermalCellPercentDeviation = indexParameterDeviation(OpenCircuitVoltageThermalCellPercentDeviation,S,Sidx),...
                VoltageRangeCellPercentDeviation = indexParameterDeviation(VoltageRangeCellPercentDeviation,S,Sidx),...
                ResistanceSOCBreakpointsCellPercentDeviation = indexParameterDeviation(ResistanceSOCBreakpointsCellPercentDeviation,S,Sidx),...
                ResistanceTemperatureBreakpointsCellPercentDeviation = indexParameterDeviation(ResistanceTemperatureBreakpointsCellPercentDeviation,S,Sidx),...
                R0ThermalCellPercentDeviation = indexParameterDeviation(R0ThermalCellPercentDeviation,S,Sidx),...
                R1ThermalCellPercentDeviation = indexParameterDeviation(R1ThermalCellPercentDeviation,S,Sidx),...
                Tau1ThermalCellPercentDeviation = indexParameterDeviation(Tau1ThermalCellPercentDeviation,S,Sidx),...
                BatteryThermalMassCellPercentDeviation = indexParameterDeviation(BatteryThermalMassCellPercentDeviation,S,Sidx),socCell.priority = priority.none,...
                batteryVoltage.priority = priority.none,batteryCurrent.priority = priority.none,...
                numCycles.priority = priority.none,...
                batteryTemperature.priority = priority.none,vParallelAssembly.priority = priority.none,...
                socParallelAssembly.priority = priority.none);
        end
    end

    for Sidx = 1:S-1
        connections
            connect(ParallelAssembly1(Sidx).n,ParallelAssembly1(Sidx+1).p);
        end
    end

    for Sidx = 1:S
        equations
            ParallelAssembly1(Sidx).socCell == reshape(socCell((Sidx*P-(P-1)):(Sidx*P)),P,1);
            ParallelAssembly1(Sidx).batteryVoltage == reshape(batteryVoltage((Sidx*P-(P-1)):(Sidx*P)),P,1);
            ParallelAssembly1(Sidx).batteryCurrent == reshape(batteryCurrent((Sidx*P-(P-1)):(Sidx*P)),P,1);
            ParallelAssembly1(Sidx).numCycles == reshape(numCycles((Sidx*P-(P-1)):(Sidx*P)),P,1);
            ParallelAssembly1(Sidx).batteryTemperature == reshape(batteryTemperature((Sidx*P-(P-1)):(Sidx*P)),P,1);
            ParallelAssembly1(Sidx).vParallelAssembly == vParallelAssembly(Sidx);
            ParallelAssembly1(Sidx).socParallelAssembly == socParallelAssembly(Sidx);
        end
    end
end

function indexes = getConnectionIndex(parameter,numChildComponents)
    definitions
        parameterWidth=size(parameter,2);
        firstIndex=(1:max(1,parameterWidth/numChildComponents):parameterWidth) .* ones(1,numChildComponents);
        lastIndex=firstIndex + max(1,parameterWidth/numChildComponents)-1;
        indexes=[firstIndex;lastIndex];
    end
end

function indexedParameterDeviation = indexParameterDeviation(parameterDeviation,s,sIndex)
    definitions
        parameterDeviationSize=size(parameterDeviation);
        moduleParameterDeviation=parameterDeviation(parameterDeviationSize(1) / s * (sIndex - 1) + 1 : parameterDeviationSize(1) / s * sIndex,:);
        indexedParameterDeviation=reshape(moduleParameterDeviation,[parameterDeviationSize(1) / s, parameterDeviationSize(2:end)]);
    end
end

function isValidSize = isValidPercentDeviationSize(percentDeviation,parameter,totalNumModels)
    definitions
        percentDeviationSize=size(percentDeviation);
        parameterSize=size(parameter);
        isScalarPercentDeviation=isequal(percentDeviationSize,[totalNumModels,1]);
        isTrueToSizePercentDeviation=isequal(percentDeviationSize,[parameterSize(1) * totalNumModels,parameterSize(2:end)]);
        isValidSize=isScalarPercentDeviation||isTrueToSizePercentDeviation;
    end
end